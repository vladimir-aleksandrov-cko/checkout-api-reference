{
  "openapi": "3.0.1",
  "info": {
    "title": "Checkout.com API Reference",
    "description": "# Introduction\nCheckout.com provide a collection of APIs that enable you to process and manage payments.  \n\nOur APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors. You can consume the APIs directly using your favorite HTTP/REST library or make use of one of our SDKs (currently available in [.NET](https://github.com/checkout/checkout-sdk-net) and [Python](https://github.com/checkout/checkout-sdk-python/tree/unified-payments)).  \n\nOur Gateway API includes features such as  AutoCapture, 3-D Secure payments, smart routing to acquirers, and much more.\n\nBroadcast is our webhook notification system informing you of events in near real-time, enabling you to take action and keep your business running smoothly.  Webhooks provide a definitive confirmation of a status update and are used for a variety of purposes, such as fulfilling orders,  sending automated status updates to customers, or even integrating with third-party application services.\n# Authentication\nWhen you sign up for an account, you are given a secret and public API key pair. You authenticate with the Checkout.com API by providing the appropriate key in the request Authorization header.\n\nNever share your secret keys. Keep them guarded and secure.\n",
    "termsOfService": "https://checkout.com/terms/",
    "contact": {
      "name": "Checkout.com Support",
      "url": "https://checkout.com",
      "email": "support@checkout.com"
    },
    "license": {
      "name": "Checkout.com",
      "url": "https://checkout.com/api/license/"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.checkout.com",
      "description": "Live API"
    },
    {
      "url": "https://api.sandbox.checkout.com",
      "description": "Sandbox API"
    }
  ],
  "paths": {
    "/event-types": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event types",
        "description": "Retrieve a list of event types grouped by their respective version that you can configure on your webhooks",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The events version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event types retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypesObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve events",
        "description": "Retrieves events ordered by the event date in descending order (latest first). Results can be paged by specifying the `skip` and `limit` query parameters.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "An ISO8601 formatted date and time to search from (default = last 6 months)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "An ISO8601 formatted date and time to search to (default = now)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of events to return per page",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of events to skip",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "payment_id",
            "in": "query",
            "description": "Search for an event by Payment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "Search for an event by Reference",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResult"
                }
              }
            }
          },
          "204": {
            "description": "No events found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event",
        "description": "Retrieves the event with the specified identifier string. The event `data` includes the full event details, the schema of which will vary based on the `type`.\n",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventObject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/events/{eventId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event notification",
        "description": "Retrieves the attempts for a specific event notification",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "The notification identifier",
            "required": true,
            "schema": {
              "pattern": "^(ntf)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or notification not found"
          }
        }
      }
    },
    "/events/{eventId}/webhooks/{webhookId}/retry": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Retry webhook",
        "description": "Retries a specific webhook notification for the given event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook identifier",
            "required": true,
            "schema": {
              "pattern": "^(wh)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Retry accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or webhook not found"
          }
        }
      }
    },
    "/events/{eventId}/webhooks/retry": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Retry all webhooks",
        "description": "Retries all webhook notifications configured for the specified event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Retry accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or webhook not found"
          }
        }
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Request a payment",
        "description": "Checkout.com supports payments from a variety of sources, from cards to\nSEPA direct debits. The source of payment must be specified using the `source.type` field along with any source specific data.\n\nTo verify the success of the payment, check the `approved` field in the response.\n",
        "parameters": [
          {
            "name": "Cko-Idempotency-Key",
            "in": "header",
            "description": "Optional idempotency key for safely retrying payment requests",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment processed successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "202": {
            "description": "Payment asynchronous or further action required",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests or duplicate request detected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nvar paymentRequest = new PaymentRequest<TokenSource>(tokenSource, Currency.USD, 5600)\n{\n    Reference = \"ORD-090857\",\n    Capture = false,\n    ThreeDs = true\n};\n\ntry\n{\n    var response = await Api.Payments.RequestAsync(paymentRequest);\n\n    if (response.IsPending && response.Pending.RequiresRedirect())\n    {\n        return Redirect(response.Pending.GetRedirectLink().Href);\n    }\n\n    if (response.Payment.Approved)\n        return PaymentSucessful(response.Payment);\n\n    return PaymentDeclined(response.Payment);\n}\ncatch (CheckoutValidationException validationEx)\n{\n    return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n    Log.Error(\"Payment request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n    throw;\n}"
          }
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment details",
        "description": "Returns the details of the payment with the specified identifier string.\n\nIf the payment method requires a redirection to a third party (e.g. 3-D Secure),\nthe redirect URL back to your site will include a `cko-session-id` query parameter\ncontaining a payment session ID that can be used to obtain the details of the payment, for example:\n\nhttp://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment or payment session identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay|sid)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        }
      }
    },
    "/payments/{id}/actions": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment actions",
        "description": "Returns all the actions associated with a payment ordered by processing date in descending order (latest first).\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment actions retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentActionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        }
      }
    },
    "/payments/{id}/captures": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Capture a payment",
        "description": "Captures a payment if supported by the payment method.\n\nFor card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptureRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Capture accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptureAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Capture not allowed"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/payments/{id}/refunds": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refund a payment",
        "description": "Refunds a payment if supported by the payment method.\n\nFor card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Refund accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Refund not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/payments/{id}/voids": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Void a payment",
        "description": "Voids a payment if supported by the payment method.\n\nFor card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Void accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Void not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      }
    },
    "/sources": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Add a payment source",
        "description": "Add a reusable payment source that can be used later to make one or more payments.\nPayment sources are linked to a specific customer and cannot be shared between customers.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment source added successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddSourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var sourceRequest = new AddSourceRequest(SourceTypes.Sepa)\n{\n    Reference = \"X-080957-N34\",\n    BillingAddress = new Address { ... },\n    Phone = new Phone { ... },\n    CustomerId = \"cus_y3oqhf46pyzuxjbcn2giaqnb44\"\n}\n\nsourceRequest.SourceData.Add(\"iban\", \"DE89 3704 0044 0532 0130 00\");\n\nvar response = await api.Sources.AddAsync(sourceRequest);"
          }
        ]
      }
    },
    "/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Request a token",
        "description": "Exchange card details or a digital wallet payment token for a reference token that can be used later to request a card payment.\n\n**To create tokens please authenticate using your public key**\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reference token created successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve webhooks",
        "description": "Retrieves the webhooks configured for the channel identified by your API key\n",
        "responses": {
          "200": {
            "description": "Configured webhooks",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No webhooks configured"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Register webhook",
        "description": "Register a new webhook endpoint that Checkout.com will POST all or selected events to\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook registered successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "Url already registered for another webhook"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve webhook",
        "description": "Retrieves the webhook with the specified identifier string\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier, for example `wh_387ac7a83a054e37ae140105429d76b5`\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "url"
                  ],
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/WebhookRequest"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhook",
        "description": "Updates an existing webhook\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier, for example `wh_387ac7a83a054e37ae140105429d76b5`\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          },
          "409": {
            "description": "Url already registered for another webhook"
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Partially update webhook",
        "description": "Updates all or some of the registered webhook details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier, for example `wh_387ac7a83a054e37ae140105429d76b5`\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated webhook",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          },
          "409": {
            "description": "Url already exists in another webhook configuration"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Remove webhook",
        "description": "Removes an existing webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier, for example `wh_387ac7a83a054e37ae140105429d76b5`\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook removed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "Line 1 of the address",
            "example": "Checkout.com"
          },
          "address_line2": {
            "type": "string",
            "description": "Line 2 of the address",
            "example": "90 Tottenham Court Road"
          },
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "London"
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "London"
          },
          "zip": {
            "type": "string",
            "description": "The address zip/postal code",
            "example": "W1T 4TJ"
          },
          "country": {
            "type": "string",
            "description": "The two-letter ISO code of the address country",
            "example": "GB"
          }
        }
      },
      "Batch": {
        "required": [
          "id",
          "status",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^bat_(\\w{26})$",
            "type": "string",
            "description": "Batch identifier",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "Processing"
          },
          "_links": {
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "SubmitBatchRequest": {
        "required": [
          "file_id",
          "action"
        ],
        "type": "object",
        "properties": {
          "file_id": {
            "pattern": "^file_(\\w{26})$",
            "type": "string",
            "description": "The identifier of the batch file previously uploaded via the [Files API](#tag/Files)",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "action": {
            "enum": [
              "payment"
            ],
            "type": "string",
            "description": "The action to be performed against the batch",
            "example": "payment"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the batch. If provided, this will be validated against the batch file's header.",
            "example": "payments-20180701"
          }
        },
        "description": "The batch request"
      },
      "SubmitBatchResponse": {
        "required": [
          "id",
          "status",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^bat_(\\w{26})$",
            "type": "string",
            "description": "Batch identifier",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The batch status",
            "example": "Processing"
          },
          "_links": {
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_malformed"
          }
        }
      },
      "BillingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "372 Weimann Lane"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "ew1 7zb"
          },
          "country": {
            "type": "string",
            "example": "SJ"
          },
          "city": {
            "type": "string",
            "example": "North Benedicthaven"
          },
          "state": {
            "type": "string",
            "example": "Georgia"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "cust_7508EA38E86A4569AF12E483519E332D"
          },
          "expiry_month": {
            "type": "string",
            "example": 6
          },
          "expiry_year": {
            "type": "string",
            "example": 2018
          },
          "billing_details": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "id": {
            "type": "string",
            "example": "card_D44D7F4CCC6348698717CD80072808B0"
          },
          "last4": {
            "type": "string",
            "example": "424242******4242"
          },
          "payment_method": {
            "type": "string",
            "example": "VISA"
          },
          "fingerprint": {
            "type": "string",
            "example": "f639cab2745bee4140bf86df6b6d6e255c5945aac3788d923fa047ea4c208622"
          },
          "name": {
            "type": "string",
            "example": "Test Customer"
          },
          "cvv_check": {
            "type": "string",
            "example": "Y"
          },
          "avs_check": {
            "type": "string",
            "example": "S"
          }
        }
      },
      "CustomerPaymentPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customer_plan_id": {
            "type": "string"
          },
          "card_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plan_track_id": {
            "type": "string"
          },
          "auto_cap_time": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "cycle": {
            "type": "string"
          },
          "recurring_count": {
            "type": "integer"
          },
          "recurring_count_left": {
            "type": "integer"
          },
          "total_collected_value": {
            "type": "integer"
          },
          "total_collected_count": {
            "type": "integer"
          },
          "current_recurring_status": {
            "type": "integer"
          },
          "start_date": {
            "type": "string"
          },
          "previous_recurring_date": {
            "type": "string"
          },
          "next_recurring_date": {
            "type": "string"
          }
        }
      },
      "Data": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the action performed against this payment"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter ISO currency code of the payment",
            "example": "USD"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment request was approved",
            "example": true
          },
          "status": {
            "enum": [
              "Pending",
              "Authorized",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code if the payment was Authorized",
            "example": 643381
          },
          "response_code": {
            "type": "string",
            "description": "Gateway response code",
            "example": 10000
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3-D Secure enrollment status if the payment was downgraded to non-3D Secure",
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the payment was flagged by a risk check",
            "default": false,
            "example": true
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ],
            "description": "The customer to which this payment is linked"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key/value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        },
        "description": "Event Data"
      },
      "EventId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The unique event identifier",
        "example": "evt_az5sblvku4ge3dwpztvyizgcau"
      },
      "EventLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau"
            }
          },
          "webhooks-retry": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "A link to retry all of the webhooks configured for the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/retry"
            }
          }
        },
        "description": "The links related to the event"
      },
      "EventObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventId"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "version": {
            "type": "string",
            "description": "Determines the version of the event sent",
            "example": 2
          },
          "created_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the event occurred"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationSummary"
            },
            "description": "The notifications (e.g. webhooks) that have been sent for the event"
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventResult": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "The total number of events",
            "example": 100
          },
          "limit": {
            "type": "integer",
            "description": "The `limit` query parameter",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "description": "The `skip` query parameter",
            "example": 10
          },
          "from": {
            "type": "string",
            "description": "The `from` query parameter",
            "format": "date-time",
            "example": 2018-01-01T00:00:00.0000000+00:00
          },
          "to": {
            "type": "string",
            "description": "The `to` query parameter",
            "format": "date-time",
            "example": 2018-01-15T12:00:00.0000000+00:00
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSummary"
            }
          }
        }
      },
      "EventSummary": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 30,
            "minLength": 30,
            "type": "string",
            "description": "The event identifier",
            "example": "evt_az5sblvku4ge3dwpztvyizgcau"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "created_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the event occurred"
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventTypesObject": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": 2
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "payment_approved",
              "payment_risk_matched",
              "payment_pending",
              "payment_declined",
              "payment_expired",
              "payment_cancelled",
              "payment_voided",
              "payment_void_declined",
              "payment_captured",
              "payment_capture_declined",
              "payment_capture_pending",
              "payment_refunded",
              "payment_refund_declined",
              "payment_refund_pending",
              "payment_chargeback",
              "payment_retrieval"
            ]
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the data sent to the endpoint",
            "example": "json"
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationAttempt"
            },
            "description": "The notification events ordered by timestamp in descending order (latest first)"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the notification",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              },
              "retry": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to retry the notification to the configured webhook",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/wh_5nuzkt62ddxuho5rwsvt6pyesi/retry"
                }
              }
            },
            "description": "The links related to the notification"
          }
        }
      },
      "NotificationAttempt": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The HTTP status code returned from the target server",
            "example": 400
          },
          "response_body": {
            "type": "string",
            "description": "The response body returned from the target server",
            "example": "Bad Request"
          },
          "retry_mode": {
            "enum": [
              "Automatic",
              "Manual"
            ],
            "type": "string",
            "description": "Whether the notification was sent automatically or requested manually"
          },
          "timestamp": {
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the attempt was made"
          }
        }
      },
      "NotificationId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The unique notification identifier",
        "example": "ntf_az5sblvku4ge3dwpztvyizgcau"
      },
      "NotificationSummary": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              }
            },
            "description": "The links related to the notification"
          }
        }
      },
      "Phone": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": 975
          },
          "number": {
            "type": "string",
            "example": 174217187
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tablet 1 gold limited"
          },
          "description": {
            "type": "string",
            "example": "Nokia Lumia"
          },
          "sku": {
            "type": "string",
            "example": "1aab2aa"
          },
          "price": {
            "type": "integer",
            "example": 100
          },
          "quantity": {
            "type": "integer",
            "example": 1
          },
          "image": {
            "type": "string",
            "example": "http://www.test_Jabari.com/"
          },
          "shipping_cost": {
            "type": "integer",
            "example": 10
          },
          "tracking_url": {
            "type": "string",
            "example": "https://www.tracker.com"
          }
        }
      },
      "ShippingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "333 Cormier Bypass"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "BR3 6TK"
          },
          "country": {
            "type": "string",
            "example": "GB"
          },
          "city": {
            "type": "string",
            "example": "Bromley"
          },
          "state": {
            "type": "string",
            "example": "Greater London"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "InvalidError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "IPAddress": {
        "type": "string",
        "format": "ipv4",
        "example": "90.197.169.245"
      },
      "Link": {
        "required": [
          "href"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The link URL"
          }
        }
      },
      "SelfLink": {
        "required": [
          "rel"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "enum": [
              "self"
            ],
            "type": "string",
            "description": "The link type"
          }
        }
      },
      "3dsData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Inidicates whether this was a 3-D Secure payment downgraded to non-3-D Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3-D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          },
          "signature_valid": {
            "type": "string",
            "description": "Verification to ensure the integrity of the response.",
            "example": "Y"
          },
          "authentication_response": {
            "type": "string",
            "description": "Indicates whether or not the cardholder was authenticated\n  * `Y` - Customer authenticated\n  * `N` - Customer not authenticated\n  * `A` - An authentication attempt occurred but could not be completed\n  * `U` - Unable to perform authentication\n",
            "example": "Y"
          },
          "cryptogram": {
            "type": "string",
            "description": "Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the integrity of the 3-D secure payment data",
            "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
          },
          "xid": {
            "type": "string",
            "description": "Unique identifier for the transaction assigned by the MPI",
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          }
        }
      },
      "3dsEnrollmentData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Inidicates whether this was a 3-D Secure payment downgraded to non-3D-Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3-D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          }
        }
      },
      "3dsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether to process this payment as a 3-D Secure",
            "default": false,
            "example": true
          },
          "attempt_n3d": {
            "type": "boolean",
            "description": "Determines whether to attempt a 3-D Secure payment as non-3-D Secure\nshould the card issuer not be enrolled.\n[Read more](https://docs.checkout.com/getting-started/merchant-api/3d-secure-charges/attempt-non-3d-secure-charge).\n",
            "default": false,
            "example": true
          },
          "eci": {
            "type": "string",
            "description": "The Electronic Commerce Indicator security level associated with the 3-D Secure enrollment result. Required if using a third party MPI.",
            "example": 5
          },
          "cryptogram": {
            "type": "string",
            "description": "Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the cardholder authentication result (3-D Secure). Required if using an external MPI.",
            "example": "AgAAAAAAAIR8CQrXcIhbQAAAAAA="
          },
          "xid": {
            "type": "string",
            "description": "The 3-D Secure transaction identifier. Required if using an external MPI.",
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          }
        },
        "description": "Information required for 3-D Secure payments"
      },
      "ActionId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The action identifier",
        "example": "act_y3oqhf46pyzuxjbcn2giaqnb44"
      },
      "BillingDescriptor": {
        "required": [
          "name",
          "city"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 25,
            "type": "string",
            "description": "Dynamic description of the charge",
            "example": "SUPERHEROES.COM"
          },
          "city": {
            "minimum": 1,
            "maxLength": 13,
            "type": "string",
            "description": "City where the charge originated",
            "example": "GOTHAM"
          }
        },
        "description": "An optional dynamic billing descriptor displayed on the account owner's statement.\n"
      },
      "CaptureAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the capture action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the capture request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be captured. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "For some alternative payments, the URI that the customer should be redirected to, to complete the capture",
                "example": {
                  "href": "https://api.checkout.com/redirect/act_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "Capture links",
            "readOnly": true
          }
        },
        "description": "Capture response"
      },
      "CaptureRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to capture in the major currency. If not specified, the full payment amount will be captured\n",
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this capture request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key/value pairs that you can attach to the capture request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "GiropayPaymentInfo": {
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 30,
            "type": "string",
            "description": "Additional information field which is shown on the payment form (label)"
          },
          "text": {
            "maxLength": 80,
            "type": "string",
            "description": "Additional information field which is shown on the payment form (text)"
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string",
            "description": "The stock-keeping unit identifier of the item",
            "example": "858818ac"
          },
          "name": {
            "type": "string",
            "description": "The name of the item or product",
            "example": "Kevlar batterang"
          },
          "description": {
            "type": "string",
            "description": "A description of the item or product",
            "example": "The fastest, hardest batterang known to man"
          },
          "image_url": {
            "type": "string",
            "description": "The URL of an image of the item or product",
            "format": "uri",
            "example": "http://example.com/batterang.jpg"
          },
          "price": {
            "type": "number",
            "description": "The unit price of the item or product in the minor currency unit",
            "example": 34.5
          },
          "quantity": {
            "type": "number",
            "description": "The number of the items purchased",
            "example": 2
          },
          "shipping_cost": {
            "type": "number",
            "description": "The shipping cost of the item",
            "example": 2.99
          },
          "shipping_tracking_url": {
            "type": "string",
            "description": "A URL to track the shipping status of the item",
            "format": "uri",
            "example": "http://www.dhl.co.uk/en/express/tracking.html?AWB=41f280bbe12cd787b47c&brand=DHL"
          }
        },
        "description": "The order line item or product that is being purchased"
      },
      "Payment": {
        "required": [
          "id",
          "requested_on",
          "amount",
          "currency",
          "status",
          "approved",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier"
          },
          "requested_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was requested"
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "amount": {
            "type": "integer",
            "description": "The original payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter ISO currency code of the payment",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "type": "string",
            "description": "Must be specified for card payments where the cardholder is not present (recurring or Merchant Offline Telephone Order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the authorization or capture was successful",
            "example": true
          },
          "status": {
            "enum": [
              "Pending",
              "Authorized",
              "Card Verified",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsData"
              }
            ],
            "description": "Provides information relating to the processing of 3-D Secure payments"
          },
          "risk": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            },
            "description": "Returns the payments risk assessment results"
          },
          "customer": {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the customer. This can be passed as a source when making a payment",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "The customer email address",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer name",
                "example": "Jack Napier"
              }
            },
            "description": "The customer to which this payment is linked"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The payment shipping details"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key/value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator security level used to authorize the payment. \nApplicable for 3-D Secure, digital wallets and network token payments.\n",
            "example": 6
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier\n",
            "example": 488341541494658
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentActionSummary"
            },
            "description": "A summary of the payment's actions, \nreturned when a session ID is used to get the payment details\n"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "refund": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund"
              }
            }
          }
        },
        "description": "Payment response"
      },
      "PaymentAcceptedResponse": {
        "required": [
          "id",
          "status",
          "customer"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier",
            "readOnly": true
          },
          "status": {
            "enum": [
              "Pending"
            ],
            "type": "string",
            "description": "The status of the payment"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment request",
            "example": "ORD-5023-4E89"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ],
            "description": "The customer to which this payment is linked"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3-D Secure enrollment status"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI that the customer should be redirected to, to complete the payment",
                "example": {
                  "href": "https://api.checkout.com/3ds/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "Payment links",
            "readOnly": true
          }
        },
        "description": "Payment response"
      },
      "PaymentAction": {
        "required": [
          "id",
          "type",
          "amount",
          "response_code",
          "processed_on"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier of the payment action"
          },
          "type": {
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund"
            ],
            "type": "string",
            "description": "The type of action"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the action was processed"
          },
          "amount": {
            "type": "integer",
            "description": "The action amount",
            "example": 6540
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the action was successful",
            "example": true
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code for cards",
            "example": 643381
          },
          "response_code": {
            "type": "string",
            "description": "Gateway response code",
            "example": 10000
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the action",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key/value pairs that you can attach to an action"
          }
        }
      },
      "PaymentActionsResponse": {
        "minItems": 1,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PaymentAction"
        },
        "description": "The payment actions\n",
        "example": [
          {
            "id": "act_fd3h6evhpn3uxdoqbuu3lqnqbm",
            "type": "Refund",
            "processed_on": 2018-01-20T10:30:48.0000000+00:00,
            "amount": 1000,
            "approved": true,
            "response_code": 10000,
            "response_summary": "Approved"
          },
          {
            "id": "act_gefycn3jcvuupboxfmqrhk2aym",
            "type": "Capture",
            "processed_on": 2018-01-17T10:30:48.0000000+00:00,
            "amount": 6540,
            "approved": true,
            "response_code": 10000,
            "response_summary": "Approved",
            "metadata": {
              "shipping_ref": "MQIBN2"
            }
          },
          {
            "id": "act_y3oqhf46pyzuxjbcn2giaqnb44",
            "type": "Authorization",
            "processed_on": 2018-01-17T09:30:48.0000000+00:00,
            "amount": 6540,
            "approved": true,
            "auth_code": 643381,
            "response_code": 10000,
            "response_summary": "Approved",
            "reference": "ORD-5023-4E89"
          }
        ]
      },
      "PaymentActionSummary": {
        "required": [
          "id",
          "type",
          "response_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier of the payment action"
          },
          "type": {
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund"
            ],
            "type": "string",
            "description": "The type of action"
          },
          "response_code": {
            "type": "string",
            "description": "Gateway response code",
            "example": 10000
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          }
        }
      },
      "PaymentDestination": {
        "required": [
          "id",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The OpenPay account identifier",
            "example": "vendor-123456"
          },
          "amount": {
            "type": "integer",
            "description": "The amount to be credited to the destination in the major currency unit",
            "example": 10.5
          }
        },
        "description": "A destination for OpenPay payments \n"
      },
      "PaymentId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The payment identifier",
        "example": "pay_y3oqhf46pyzuxjbcn2giaqnb44"
      },
      "PaymentRecipient": {
        "required": [
          "dob",
          "account_number",
          "zip",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "dob": {
            "type": "string",
            "description": "The recipient's date of birth in yyyy-mm-dd format",
            "format": "date",
            "example": 1985-05-15T00:00:00.0000000+00:00
          },
          "account_number": {
            "maxLength": 10,
            "minLength": 10,
            "type": "string",
            "description": "The first six digits and the last four digits of the primary recipient's card, without spaces, or, up to ten characters of the primary recipient's account number",
            "example": 5555554444
          },
          "zip": {
            "type": "string",
            "description": "The first part of the UK postcode for example W1T 4TJ would be W1T",
            "example": "W1T"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the recipient",
            "example": "Jones"
          }
        },
        "description": "Required by VISA and MasterCard for domestic UK transactions processed by Financial Institutions. [Read more](https://docs.checkout.com/v2/docs/requirements-for-financial-institutions)"
      },
      "PaymentRequest": {
        "required": [
          "currency",
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The payment amount in the major currency.\nOmitting the amount or providing 0 will perform a card verification.\n",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter ISO currency code\n",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "type": "string",
            "description": "Must be specified for card payments where the cardholder is not present (recurring or Merchant Offline Telephone Order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment such as an order number",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable)",
            "default": true,
            "example": true
          },
          "capture_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "description": "An ISO 8601 timestamp that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true.\n"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of an existing customer. If neither customer `id` or `email` is provided\na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "An optional email address to associate with the customer",
                "format": "email",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Jack Napier"
              }
            },
            "description": "Details of the customer associated with the payment"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The payment shipping details"
          },
          "3ds": {
            "$ref": "#/components/schemas/3dsRequest"
          },
          "previous_payment_id": {
            "type": "string",
            "description": "For payments that use stored card details such as recurring payments,\nan existing payment identifier from the recurring series or the Scheme Transaction Id. [Read more](https://docs.checkout.com/v2/docs/stored-card-details).\n",
            "example": "pay_fun26akvvjjerahhctaq2uzhu4"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "description": "For redirect payment methods, overrides the default success redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/success"
          },
          "failure_url": {
            "type": "string",
            "description": "For redirect payment methods, overrides the default failure redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/fail"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment. Required for some risk checks."
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key/value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "PaymentRequestSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "card"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token": "#/components/schemas/01_PaymentRequestTokenSource",
            "id": "#/components/schemas/02_PaymentRequestIdSource",
            "card": "#/components/schemas/03_PaymentRequestCardSource",
            "customer": "#/components/schemas/04_PaymentRequestCustomerSource",
            "network_token": "#/components/schemas/05_PaymentRequestNetworkTokenSource",
            "alipay": "#/components/schemas/06_PaymentRequestAlipaySource",
            "boleto": "#/components/schemas/07_PaymentRequestBoletoSource",
            "giropay": "#/components/schemas/08_PaymentRequestGiropaySource",
            "ideal": "#/components/schemas/09_PaymentRequestIdealSource",
            "poli": "#/components/schemas/10_PaymentRequestPoliSource",
            "qiwi": "#/components/schemas/11_PaymentRequestQiwiSource",
            "safetypay": "#/components/schemas/12_PaymentRequestSafetyPaySource",
            "sofort": "#/components/schemas/13_PaymentRequestSofortSource"
          }
        }
      },
      "PaymentResponse": {
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "approved",
          "status",
          "response_code",
          "processed_on",
          "customer",
          "source",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the action performed against this payment"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter ISO currency code of the payment",
            "example": "USD"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the authorization or capture was successful",
            "example": true
          },
          "status": {
            "enum": [
              "Authorized",
              "Pending",
              "Card Verified",
              "Captured",
              "Declined"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code if the payment was Authorized",
            "example": 643381
          },
          "response_code": {
            "type": "string",
            "description": "Gateway response code",
            "example": 10000
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3-D Secure enrollment status if the payment was downgraded to non-3-D Secure",
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "risk": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            },
            "description": "Returns the payments risk assessment results"
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ],
            "description": "The customer to which this payment is linked"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator security level used to authorize the payment. \nApplicable for 3-D Secure, digital wallets and network token payments.\n",
            "example": 6
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier\n",
            "example": 489341065491658
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "void": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids"
              },
              "capture": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture"
              }
            }
          }
        },
        "description": "Payment Response"
      },
      "PaymentResponseCustomer": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the customer. This can be passed as a source when making a payment",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer email address",
            "example": "jokershere@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer name",
            "example": "Jack Napier"
          }
        },
        "description": "The customer to which this payment is linked"
      },
      "PaymentResponseSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type. For any payment request sources that result in a card token (token, source ID etc.)\nthis will be `card` otherwise the name of the alternative payment method.\n",
            "example": "card"
          },
          "id": {
            "type": "string",
            "description": "The payment source identifier that can be used for subsequent payments.\nFor new sources, this will only be returned if the payment was approved.\n",
            "example": "src_wmlfc3zyhqzehihu7giusaaawu"
          },
          "billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The payment source owner's billing address"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ],
            "description": "The payment source owner's phone number"
          }
        },
        "description": "Payment source",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_PaymentResponseCardSource",
            "alipay": "#/components/schemas/02_PaymentResponseAlipaySource",
            "boleto": "#/components/schemas/03_PaymentResponseBoletoSource",
            "giropay": "#/components/schemas/04_PaymentResponseGiropaySource",
            "ideal": "#/components/schemas/05_PaymentResponseIdealSource",
            "poli": "#/components/schemas/06_PaymentResponsePoliSource",
            "qiwi": "#/components/schemas/07_PaymentResponseQiwiSource",
            "safetypay": "#/components/schemas/08_PaymentResponseSafetyPaySource",
            "sofort": "#/components/schemas/09_PaymentResponseSofortSource"
          }
        }
      },
      "RefundAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the refund action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the refund request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be refund. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "Refund links",
            "readOnly": true
          }
        },
        "description": "Refund response"
      },
      "RefundRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to refund in the major currency. If not specified, the full payment amount will be refunded\n",
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this refund request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key/value pairs that you can attach to the refund request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "01_PaymentRequestTokenSource": {
        "required": [
          "token"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The Checkout.com token for example a card or wallet or token",
                "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address. This will override the billing address specified during tokenisation"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number. This will override the phone number specified during tokenisation"
              }
            }
          }
        ],
        "description": "A token payment source"
      },
      "02_PaymentRequestIdSource": {
        "required": [
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment source identifer for example, a card source identifier",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code (for card sources). 3 digits, except for Amex (4 digits).",
                "example": 956
              }
            }
          }
        ],
        "description": "An existing payment source"
      },
      "03_PaymentRequestCardSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "type",
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number",
                "example": 4543474002249996
              },
              "expiry_month": {
                "minimum": 1,
                "type": "integer",
                "description": "The two-digit expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The four-digit expiry year of the card",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The card-holder name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits).",
                "example": 956
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              }
            }
          }
        ],
        "description": "A card payment source"
      },
      "04_PaymentRequestCustomerSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The customer identifier, required if `email` is not provided",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "The customer email address, required if `id` is not provided",
                "format": "email",
                "example": "jokershere@gmail.com"
              }
            }
          }
        ],
        "description": "A customer source"
      },
      "05_PaymentRequestNetworkTokenSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "type",
              "token",
              "expiry_month",
              "expiry_year",
              "token_type"
            ],
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The network token PAN",
                "example": 4543474002249996
              },
              "expiry_month": {
                "minimum": 1,
                "type": "integer",
                "description": "The two-digit expiry month of the token",
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The four-digit expiry year of the token",
                "example": 2025
              },
              "token_type": {
                "enum": [
                  "vts",
                  "applepay",
                  "googlepay"
                ],
                "type": "string",
                "description": "The type of token"
              },
              "cryptogram": {
                "type": "string",
                "description": "Base64 encoded cryptographic identifier (TAVV) used by card schemes to validate the token verification result. Required unless the `previous_payment_id` is specified.",
                "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
              },
              "eci": {
                "type": "string",
                "description": "The Electronic Commerce Indicator security level associated with the token. \nRequired unless the `previous_payment_id` is specified.\nFor 3-D Secure payments the ECI must be provided in the `3ds` payment field.\n",
                "example": 5
              },
              "name": {
                "type": "string",
                "description": "The cardholder name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits).",
                "example": 956
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The cardholder's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The cardholder's phone number"
              }
            }
          }
        ],
        "description": "A network token payment source"
      },
      "06_PaymentRequestAlipaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ],
        "description": "Alipay Source"
      },
      "07_PaymentRequestBoletoSource": {
        "required": [
          "birthDate",
          "cpf",
          "customerName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "birthDate": {
                "type": "string",
                "description": "The date of birth (YYYY-MM-DD)",
                "example": 1977-04-28T00:00:00.0000000+00:00
              },
              "cpf": {
                "type": "string",
                "description": "The Brazilian personal tax identifier (Cadastro de Pessoas Físicas)",
                "example": "123.456.789-00"
              },
              "customerName": {
                "type": "string",
                "description": "The customer's name",
                "example": "Igor Toupee"
              }
            }
          }
        ],
        "description": "AstroPay Boleto Source"
      },
      "08_PaymentRequestGiropaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "purpose",
              "bic"
            ],
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose"
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits)"
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "IBAN without whitespaces. This parameter is optional."
              },
              "info_fields": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GiropayPaymentInfo"
                }
              }
            }
          }
        ],
        "description": "Giropay Source"
      },
      "09_PaymentRequestIdealSource": {
        "required": [
          "issuer_id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "issuer_id": {
                "type": "string",
                "description": "The issuer identifer",
                "example": "ABNANL2A"
              }
            }
          }
        ],
        "description": "iDEAL Source"
      },
      "10_PaymentRequestPoliSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ],
        "description": "POLi Source"
      },
      "11_PaymentRequestQiwiSource": {
        "required": [
          "walletId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "walletId": {
                "type": "string",
                "description": "The QIWI wallet ID",
                "example": 78000001234
              }
            }
          }
        ],
        "description": "QIWI Source"
      },
      "12_PaymentRequestSafetyPaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ],
        "description": "SafetyPay Source"
      },
      "13_PaymentRequestSofortSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ],
        "description": "Sofort Source"
      },
      "01_PaymentResponseCardSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "required": [
              "expiry_month",
              "expiry_year",
              "last4",
              "fingerprint",
              "bin"
            ],
            "type": "object",
            "properties": {
              "expiry_month": {
                "minimum": 1,
                "type": "integer",
                "description": "The two-digit expiry month",
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The four-digit expiry year",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The card-holder name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "type": "string",
                "description": "The last four digits of the card number",
                "example": 9996
              },
              "fingerprint": {
                "type": "string",
                "description": "Uniquely identifies this particular card number. You can use this to compare cards across customers",
                "example": "F639CAB2745BEE4140BF86DF6B6D6"
              },
              "bin": {
                "type": "string",
                "description": "The card issuer BIN",
                "example": 454347
              },
              "card_type": {
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid"
                ],
                "type": "string",
                "description": "The card type",
                "example": "Credit"
              },
              "card_category": {
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "type": "string",
                "description": "The card category",
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The card issuer country ISO-2 code",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              },
              "avs_check": {
                "type": "string",
                "description": "The Address Verification System check result",
                "example": "S"
              },
              "cvv_check": {
                "type": "string",
                "description": "The CVV check result",
                "example": "Y"
              },
              "payment_account_reference": {
                "type": "string",
                "description": "A unique reference to the underlying card for network tokens e.g. Apple Pay/Google Pay",
                "example": "EUNIX9AX7THOOJIEJ2AP6OOFAHGH4"
              }
            }
          }
        ],
        "description": "A card payment source"
      },
      "02_PaymentResponseAlipaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "An Alipay payment source"
      },
      "03_PaymentResponseBoletoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "An AstroPay Boleto payment source"
      },
      "04_PaymentResponseGiropaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment",
                "example": "Set of 3 masks"
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "Bank Identifier Code (BIC). It can be exactly 8 characters or 11 characters long.",
                "example": "TESTDETT421"
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "International Bank Account Number (IBAN) without whitespaces",
                "example": "DE46940594210000012345"
              },
              "account_holder": {
                "type": "string",
                "description": "Account holder information",
                "example": "Test GmbH & Co. KG"
              }
            }
          }
        ],
        "description": "A Giropay payment source"
      },
      "05_PaymentResponseIdealSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "A iDEAL payment source"
      },
      "06_PaymentResponsePoliSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "A POLi payment source"
      },
      "07_PaymentResponseQiwiSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "A QIWI payment source"
      },
      "08_PaymentResponseSafetyPaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "A SafetyPay payment source"
      },
      "09_PaymentResponseSofortSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "A Sofort payment source"
      },
      "RiskRequest": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether a risk assessment should be performed",
            "default": true,
            "example": false
          }
        },
        "description": "Configures the risk assessment performed during the processing of the payment"
      },
      "VoidAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the void action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be refund. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "Void links",
            "readOnly": true
          }
        },
        "description": "Void response"
      },
      "VoidRequest": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this void request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "Set of key/value pairs that you can attach to the void request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "VoidResponse": {
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the void action"
          },
          "amount": {
            "type": "integer",
            "description": "The void amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter ISO currency code of the payment",
            "example": "USD"
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "example": "Voided"
          },
          "response_code": {
            "type": "string",
            "description": "Gateway response code",
            "example": 10000
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the void was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 1,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the payment"
          }
        },
        "description": "Payment response"
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "country_code": {
            "maxLength": 7,
            "minLength": 1,
            "type": "string",
            "description": "The international country calling code. Required for some risk checks.",
            "example": 1
          },
          "number": {
            "maxLength": 25,
            "minLength": 6,
            "type": "string",
            "description": "The phone number",
            "example": "415 555 2671"
          }
        },
        "description": "A phone number"
      },
      "ResourceId": {
        "maxLength": 50,
        "type": "string",
        "description": "The resource ID. Defaults to UUID v4",
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      },
      "ServerTimestamp": {
        "type": "string",
        "description": "Read-only UTC timestamp, automatically assigned by us.",
        "format": "date-time",
        "readOnly": true
      },
      "01_SepaSource": {
        "required": [
          "billing_address"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceRequest"
          },
          {
            "type": "object",
            "properties": {
              "source_data": {
                "required": [
                  "first_name",
                  "last_name",
                  "account_iban",
                  "bic",
                  "billing_descriptor",
                  "mandate_type"
                ],
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "The account holder's first name",
                    "example": "Marcus"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The account holder's last name",
                    "example": "Barrilius Maximus"
                  },
                  "account_iban": {
                    "type": "string",
                    "description": "The account IBAN",
                    "example": "DE25100100101234567893"
                  },
                  "bic": {
                    "type": "string",
                    "description": "The account BIC",
                    "example": "PBNKDEFFXXX"
                  },
                  "billing_descriptor": {
                    "type": "string",
                    "description": "The billing descriptor",
                    "example": "ExampleCompany.com"
                  },
                  "mandate_type": {
                    "enum": [
                      "single",
                      "recurring"
                    ],
                    "type": "string",
                    "description": "The type of the mandate",
                    "example": "recurring"
                  }
                },
                "description": "Additional data required to create SEPA payment sources"
              }
            }
          }
        ],
        "description": "A SEPA payment source"
      },
      "01_SepaSourceResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AddSourceResponse"
          },
          {
            "type": "object",
            "properties": {
              "response_data": {
                "type": "object",
                "properties": {
                  "mandate_reference": {
                    "type": "string",
                    "description": "The direct debit mandate reference",
                    "example": "MANDXI9809809"
                  }
                },
                "description": "SEPA direct debit details"
              },
              "_links": {
                "minItems": 1,
                "type": "object",
                "properties": {
                  "self": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "The URI of the payment source"
                  },
                  "cancel": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "A link to Cancel the SEPA direct debit mandate"
                  }
                },
                "description": "The links related to the SEPA payment source",
                "readOnly": true
              }
            }
          }
        ],
        "description": "The SEPA mandate details"
      },
      "AddSourceResponse": {
        "required": [
          "type",
          "customer",
          "response_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be used later for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "response_code": {
            "type": "string",
            "description": "Gateway response code",
            "example": 10000
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceResponseCustomer"
              }
            ],
            "description": "The customer to which the payment source is linked"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSourceResponse"
          }
        }
      },
      "Source": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be later used for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "_links": {
            "minItems": 1,
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment source",
                "example": {
                  "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the payment source",
            "readOnly": true,
            "example": {
              "self": {
                "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "sepa:mandate": {
                "href": "https://api.checkout.com/sepa/mandates/src_y3oqhf46pyzuxjbcn2giaqnb44"
              }
            }
          }
        }
      },
      "SourceRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify the source",
            "example": "X-080957-N34"
          },
          "billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The payment source owner's billing address"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ],
            "description": "The payment source owner's phone number"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of an existing customer. If neither customer `id` or `email` is provided\na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "An optional email address to associate with the customer",
                "format": "email",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Jack Napier"
              }
            },
            "description": "Details of the customer to associate with the source"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSource"
          }
        }
      },
      "SourceResponseCustomer": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer email address",
            "example": "jokershere@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer name",
            "example": "Jack Napier"
          }
        },
        "description": "The customer to which the payment source is linked"
      },
      "Timestamp": {
        "type": "string",
        "description": "ISO 8601 timestamp",
        "format": "date-time"
      },
      "01_CardTokenRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "required": [
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number",
                "example": 4543474002249996
              },
              "expiry_month": {
                "minimum": 1,
                "type": "integer",
                "description": "The two-digit expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The four-digit expiry year of the card",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The card-holder name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits).",
                "example": 956
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              }
            }
          }
        ],
        "description": "Card Token Request"
      },
      "01_CardTokenResponse": {
        "required": [
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          },
          {
            "type": "object",
            "properties": {
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              },
              "expiry_month": {
                "minimum": 1,
                "type": "integer",
                "description": "The two-digit expiry month",
                "example": 6
              },
              "expiry_year": {
                "type": "integer",
                "description": "The four-digit expiry year",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The card-holder name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "type": "string",
                "description": "The last four digits of the card number",
                "example": 9996
              },
              "bin": {
                "type": "string",
                "description": "The card issuer BIN",
                "example": 454347
              },
              "card_type": {
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid"
                ],
                "type": "string",
                "description": "The card type",
                "example": "Credit"
              },
              "card_category": {
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "type": "string",
                "description": "The card category",
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The card issuer country ISO-2 code",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              }
            }
          }
        ],
        "description": "Card Token Response"
      },
      "02_ApplePayTokenRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "type": "object",
            "properties": {
              "token_data": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "description": "Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data."
                  },
                  "data": {
                    "type": "string",
                    "description": "Encrypted payment data. Base64 encoded as a string"
                  },
                  "signature": {
                    "type": "string",
                    "description": "Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm."
                  },
                  "header": {
                    "type": "object",
                    "description": "Additional version-dependent information used to decrypt and verify the payment."
                  }
                },
                "description": "The Apple Pay Payment Token",
                "example": {
                  "version": "EC_v1",
                  "data": "t7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzvebKp3P0TekUslSQ8nkuacUgLdks2IKyCm7U3OL/PEYLXE7w60VkQ8WE6FXs/cqHkwtSW9vkzZNDxSLDg9slgLYxAH2/iztdipPpyIYKl0Kb6Rn9rboF+lwgRxM1B3n84miApwF5Pxl8ZOOXGY6F+3DsDo7sMCUTaJK74DUJJcjIXrigtINWKW6RFa/4qmPEC/Y+syg04x7B99mbLQQzWFm7z6HfRmynPM9/GA0kbsqd/Kn5Mkqssfhn/m6LuNKsqEmbKi85FF6kip+F17LRawG48bF/lT8wj/QEuDY0G7t/ryOnGLtKteXmAf0oJnwkelIyfyj2KI8GChBuTJonGlXKr5klPE89/ycmkgDl+T6Ms7PhiNZpuGEE2QE=",
                  "signature": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0BBwEAAKCAMIID5jCCA4ugAwIBAgIIaGD2mdnMpw8wCgYIKoZIzj0EAwIwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE2MDYwMzE4MTY0MFoXDTIxMDYwMjE4MTY0MFowYjEoMCYGA1UEAwwfZWNjLXNtcC1icm9rZXItc2lnbl9VQzQtU0FOREJPWDEUMBIGA1UECwwLaU9TIFN5c3RlbXMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgjD9q8Oc914gLFDZm0US5jfiqQHdbLPgsc1LUmeY+M9OvegaJajCHkwz3c6OKpbC9q+hkwNFxOh6RCbOlRsSlaOCAhEwggINMEUGCCsGAQUFBwEBBDkwNzA1BggrBgEFBQcwAYYpaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZWFpY2EzMDIwHQYDVR0OBBYEFAIkMAua7u1GMZekplopnkJxghxFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUI/JJxE+T5O8n5sT2KGw/orv9LkswggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlYWljYTMuY3JsMA4GA1UdDwEB/wQEAwIHgDAPBgkqhkiG92NkBh0EAgUAMAoGCCqGSM49BAMCA0kAMEYCIQDaHGOui+X2T44R6GVpN7m2nEcr6T6sMjOhZ5NuSo1egwIhAL1a+/hp88DKJ0sv3eT3FxWcs71xmbLKD/QJ3mWagrJNMIIC7jCCAnWgAwIBAgIISW0vvzqY2pcwCgYIKoZIzj0EAwIwZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNTA2MjM0NjMwWhcNMjkwNTA2MjM0NjMwWjB6MS4wLAYDVQQDDCVBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATwFxGEGddkhdUaXiWBB3bogKLv3nuuTeCN/EuT4TNW1WZbNa4i0Jd2DSJOe7oI/XYXzojLdrtmcL7I6CmE/1RFo4H3MIH0MEYGCCsGAQUFBwEBBDowODA2BggrBgEFBQcwAYYqaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZXJvb3RjYWczMB0GA1UdDgQWBBQj8knET5Pk7yfmxPYobD+iu/0uSzAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFLuw3qFYM4iapIqZ3r6966/ayySrMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlcm9vdGNhZzMuY3JsMA4GA1UdDwEB/wQEAwIBBjAQBgoqhkiG92NkBgIOBAIFADAKBggqhkjOPQQDAgNnADBkAjA6z3KDURaZsYb7NcNWymK/9Bft2Q91TaKOvvGcgV5Ct4n4mPebWZ+Y1UENj53pwv4CMDIt1UQhsKMFd2xd8zg7kGf9F3wsIW2WT8ZyaYISb1T4en0bmcubCYkhYQaZDwmSHQAAMYIBjTCCAYkCAQEwgYYwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTAghoYPaZ2cynDzANBglghkgBZQMEAgEFAKCBlTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNzA4MDIxNjA5NDZaMCoGCSqGSIb3DQEJNDEdMBswDQYJYIZIAWUDBAIBBQChCgYIKoZIzj0EAwIwLwYJKoZIhvcNAQkEMSIEIGEfVr+4x9RQXyfF8IYA0kraoK0pcZEaBlINo6EGrOReMAoGCCqGSM49BAMCBEgwRgIhAKunK47QEr/ZjxPlVl+etzVzbKA41xPLWtO01oUOlulmAiEAiaFH9F9LK6uqTFAUW/WIDkHWiFuSm5a3NVox7DlyIf0AAAAAAAA=",
                  "header": {
                    "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEX1ievoT8DRB8T5zGkhHZHeDr0oBmYEgsDSxyT0MD0IZ2Mpfjz2LdWq6LUwSH9EmxdPEzMunsZKWMyOr3K/zlsw==",
                    "publicKeyHash": "tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6Nl0=",
                    "transactionId": "3cee89679130a4b2617c76118a1c62fd400cd45b49dc0916d5b951b560cd17b4"
                  }
                }
              }
            }
          }
        ],
        "description": "Apple Pay Token Request"
      },
      "02_ApplePayTokenResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          }
        ],
        "description": "Apple Pay Token Response"
      },
      "03_GooglePayTokenRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "type": "object",
            "properties": {
              "token_data": {
                "type": "object",
                "properties": {
                  "signature": {
                    "type": "string",
                    "description": "Verifies the message came from Google. The signature is created using ECDSA."
                  },
                  "protocolVersion": {
                    "type": "string",
                    "description": "Identifies which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. If it is not set, assume ECv0."
                  },
                  "signedMessage": {
                    "type": "string",
                    "description": "A serialized JSON string containing the encryptedMessage, ephemeralPublicKey and tag. To simplify the signature verification process, this value is serialized."
                  }
                },
                "description": "The Google Pay Payment Token",
                "example": {
                  "protocolVersion": "ECv1",
                  "signature": "TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ",
                  "signedMessage": "{\"encryptedMessage\": \"ZW5jcnlwdGVkTWVzc2FnZQ==\", \"ephemeralPublicKey\": \"ZXBoZW1lcmFsUHVibGljS2V5\", \"tag\": \"c2lnbmF0dXJl\"}"
                }
              }
            }
          }
        ],
        "description": "Google Pay Token Request"
      },
      "03_GooglePayTokenResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          }
        ],
        "description": "Google Pay Token Response"
      },
      "TokenRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized",
            "example": "card"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_CardTokenRequest",
            "applepay": "#/components/schemas/02_ApplePayTokenRequest",
            "googlepay": "#/components/schemas/03_GooglePayTokenRequest"
          }
        }
      },
      "TokenResponse": {
        "required": [
          "type",
          "token",
          "expires_on"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized",
            "example": "card"
          },
          "token": {
            "type": "string",
            "description": "The reference token",
            "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
          },
          "expires_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the token will expire"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_CardTokenResponse",
            "applepay": "#/components/schemas/02_ApplePayTokenResponse",
            "googlepay": "#/components/schemas/03_GooglePayTokenResponse"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "payment_source_required"
            }
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/webhooks"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "headers": {
            "type": "object",
            "example": {
              "authorization": 1234
            }
          },
          "content_type": {
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "example": "json"
          },
          "event_types": {
            "$ref": "#/components/schemas/WebhookEvents"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment source",
                "example": {
                  "href": "https://api.checkout.com/webhooks/wh_387ac7a83a054e37ae140105429d76b5"
                }
              }
            }
          }
        }
      },
      "WebhookEvents": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "payment_approved",
          "payment_flagged",
          "payment_pending",
          "payment_declined",
          "payment_expired",
          "payment_cancelled",
          "payment_voided",
          "payment_void_declined",
          "payment_captured",
          "payment_capture_declined",
          "payment_capture_pending",
          "payment_refunded",
          "payment_refund_declined",
          "payment_refund_pending"
        ]
      },
      "WebhookRequest": {
        "required": [
          "url",
          "event_types"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Your webhook endpoint",
            "format": "url",
            "example": "https://example.com/webhooks"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the webhook is active",
            "default": true,
            "example": true
          },
          "headers": {
            "type": "object",
            "example": {
              "authorization": 1234
            }
          },
          "content_type": {
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "The content type to be sent to the webhook endpoint",
            "default": "json",
            "example": "json"
          },
          "event_types": {
            "$ref": "#/components/schemas/WebhookEvents"
          }
        }
      }
    },
    "responses": {
      "AccessForbidden": {
        "description": "Access forbidden, invalid API-KEY was used",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidDataError": {
        "description": "Invalid data was sent",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters": {
      "collectionCriteria": {
        "name": "criteria",
        "in": "query",
        "description": "The json criteria for collection",
        "schema": {
          "type": "string"
        }
      },
      "collectionExpand": {
        "name": "expand",
        "in": "query",
        "description": "Expand response to get full related object intead of ID.  See the expand guide for more info.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFields": {
        "name": "fields",
        "in": "query",
        "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFilter": {
        "name": "filter",
        "in": "query",
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n",
        "schema": {
          "type": "string"
        }
      },
      "collectionLimit": {
        "name": "limit",
        "in": "query",
        "description": "The collection items limit",
        "schema": {
          "maximum": 1000,
          "minimum": 0,
          "type": "integer"
        }
      },
      "collectionOffset": {
        "name": "offset",
        "in": "query",
        "description": "The collection items offset",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "collectionQuery": {
        "name": "q",
        "in": "query",
        "description": "The partial search of the text fields.",
        "schema": {
          "type": "string"
        }
      },
      "collectionSort": {
        "name": "sort",
        "in": "query",
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
        "style": "form",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "hash": {
        "name": "hash",
        "in": "path",
        "description": "The token identifier string",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "mediaType": {
        "name": "Accept",
        "in": "header",
        "description": "The response media type",
        "schema": {
          "enum": [
            "application/json"
          ],
          "type": "string",
          "default": "application/json"
        }
      },
      "resourceId": {
        "name": "id",
        "in": "path",
        "description": "The resource identifier string",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "rulesVersion": {
        "name": "version",
        "in": "path",
        "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
        "required": true,
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "systemEventType": {
        "name": "eventType",
        "in": "path",
        "description": "The event type",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "Cko-Request-Id": {
        "description": "Unique identifer of the request",
        "schema": {
          "type": "string"
        }
      },
      "Cko-Version": {
        "description": "Version of the API",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "description": "Unless explicitly stated, all endpoints require authentication using your secret key.  Public keys should only be used in JavaScript or native applications. \nYou can generate new API keys within the [Checkout.com Hub](https://hub.checkout.com/v2).\n",
        "name": "Authorization",
        "in": "query"
      }
    }
  },
  "tags": [
    {
      "name": "Payments"
    },
    {
      "name": "Sources"
    },
    {
      "name": "Tokens"
    },
    {
      "name": "Webhooks"
    },
    {
      "name": "Events"
    }
  ]
}